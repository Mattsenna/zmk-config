/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | ALT | LWR | GUI |   | SPAC| RSE  | RET |
                        bindings = <
   &kp ESC   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHIFT
                  &kp LALT &mo 1 &kp LGUI   &kp SPACE &mo 2 &kp RET
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |TABL |PGUP |TABR |     |   |  -  |  +  |  [  |  ]  |  /  |   \ |
// | SHFT |DLEFT|DRGHT|PGDN |     |     |   |  _  |  =  | "{" | "}" |  `  | "|" |
//                    | GUI |     | SPC |   |SPAC |     | ALT |
                        bindings = <
   &kp TAB    &kp EXCL       &kp AT       &kp HASH       &kp DLLR       &kp PRCNT         &kp CARET   &kp AMPS   &kp KP_MULTIPLY &kp LPAR    &kp RPAR &kp BSPC
   &kp LCTRL &trans &kp LS(LC(TAB)) &kp PG_UP &kp LC(TAB) &trans   &kp MINUS &kp PLUS &kp LBKT &kp RBKT &kp FSLH &kp BSLH
   &kp LSHFT  &kp LG(LC(LEFT))       &kp LG(LC(RIGHT))       &kp PG_DN       &trans       &trans         &kp UNDER   &kp EQUAL  &kp LBRC &kp RBRC    &kp GRAVE &kp PIPE
                          	        &kp LGUI     &trans       &kp SPACE      &kp SPACE  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  DEL |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | CTRL |     |TABL |PGUP |TABR |     |   | TAB | LFT |  DN |  UP | RGT |  `   |
// | SHFT |DLEFT|DRGHT|PGDN |PLAY | MUTE|   |PRSCN| CAPS| VOLD| VOLU| PRV |  NXT |
//                    | GUI |     | SPC |   | ENT |     | CTRL|
                        bindings = <
   &kp  DEL  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp N6 &kp N7  &kp N8 &kp N9 &kp N0 &kp BSPC
   &kp LCTRL &trans   &kp LS(LC(TAB)) &kp PG_UP   &kp LC(TAB)   &trans      &kp TAB &kp LEFT &kp DOWN        &kp UP &kp RIGHT &kp GRAVE
   &kp LSHFT &kp LG(LC(LEFT))   &kp LG(LC(RIGHT)) &kp PG_DN   &kp C_PLAY_PAUSE   &kp C_MUTE      &kp PSCRN &kp CAPS &kp C_VOL_DN &kp C_VOL_UP        &kp C_PREV &kp C_NEXT
                    	     &kp LGUI &trans   &kp SPACE   &kp SPACE   &kp RCTL    &kp RCTRL
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// |  DEL |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT 1| BT 2| BT 3| BT 4| BT 5|   | TAB | LFT |  DN |  UP | RGT |  `   |
// | SHFT |DLEFT|DRGHT|PGDN |PLAY | MUTE|   |PRSCN| CAPS| VOLD| VOLU| PRV |  NXT |
//                    | GUI |     | SPC |   | ENT |     | CTRL|
                        bindings = <
   &kp  DEL  &kp N1 &kp N2 &kp E &kp N4 &kp N5   &kp N6 &kp N7  &kp N8 &kp N9 &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0   &bt BT_SEL 1 &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4      &kp TAB &kp LEFT &kp DOWN        &kp UP &kp RIGHT &kp GRAVE
   &kp LSHFT &kp LG(LC(LEFT))   &kp LG(LC(RIGHT)) &kp PG_DN   &kp C_PLAY_PAUSE   &kp C_MUTE      &kp PSCRN &kp CAPS &kp C_VOL_DN &kp C_VOL_UP        &kp C_PREV &kp C_NEXT
                             &kp LGUI &trans   &kp SPACE   &kp SPACE   &kp RCTL    &kp RCTRL
                        >;
                };
        };
};
